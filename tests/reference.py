#!/usr/bin/env python3
from itertools import accumulate, repeat
from pathlib import Path

from sympy import Float, Pow, lowergamma

TEMPLATE = """/** Reference values of the Boys function of order {order} for {name} arguments. */
template <> std::vector<double> ref_{name}_args<{order}>() {{
  return {lines};
}}
"""
FILE = """#include \"testing_utils.hpp\"

#include <vector>

/* This file was autogenerated. DO NOT EDIT! */

namespace detail {{
{lines}}} // namespace detail
"""


def generate(name, nargs, start, end):
    max_order = 28
    start = Float(start)
    end = Float(end)
    increment = (end - start) / (nargs - 1)
    args = [start + increment*n for n, x in enumerate(range(nargs))]
    ls = []
    for order in range(max_order + 1):
        ys = [Float(0.0)] * nargs
        for i, x in enumerate(args):
            if name == "small" and i == 0:
                # at x = 0.0, we can evaluate the Boys function analytically
                ys[i] = Float(1 / (2 * order + 1))
            else:
                # away from 0.0, we use the lower gamma function
                ys[i] = lowergamma(order + 1 / 2, x) / (2 * Pow(x, (order + 1 / 2)))
        l = f"{{{', '.join([format(_.evalf(25), '3.20e') for _ in ys])}}}"
        ls.append(TEMPLATE.format(name=name, order=order, lines=l))
    with (Path.cwd() / f"reference_{name}_args.cpp").open("w") as fh:
        fh.write(FILE.format(lines="\n".join(ls)))


if __name__ == "__main__":
    # small arguments
    generate("small", 1000, 0.0, 12.0)
    # medium arguments
    generate("medium", 1000, 12.01, 30.0)
    # large arguments
    generate("large", 1000, 30.01, 150.0)
